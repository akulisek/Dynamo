#################################
# init script
#################################
# init variables

REPLICATION="3"
DYN_MAX_KEY="65536"

DS_VM="docker-SD" 
VM_1="sm-docker-0"
VM_2="docker-1"
LOG_VM="docker-LOG"
NETWORK_NAME="private-network"
NETWORK="192.168.0.0/24"
PROXY="proxy"
SD="consul"
NODE="java_instance"
NODE_IMAGE="java_image"
LOG_IMAGE="elk_image"
LOG_INSTANCE="elk_instance"
RAILS_NODE="rails-webapp"
RAILS_NODE_IMAGE="rails-image"
  
#################################

# making new docker virtual machine with discovery service with virtualbox driver
docker-machine create -d virtualbox $DS_VM

#change to $DS_VM
eval $(docker-machine env $DS_VM)

#run consul docker container 
docker run -d -p "8400:8400" -p "8500:8500" -p "8600:53/udp"  --name $SD progrium/consul -server -bootstrap -ui-dir /ui 

DS_IP=$(docker-machine ip $DS_VM)

#initialize empty dynamo k-v storage in consul
curl -X PUT -H "Content-Type: application/json" -d '{}' http://$DS_IP:8500/v1/kv/docker_nodes

#run new virtual machines swarm and host
docker-machine create -d virtualbox --swarm --swarm-master --swarm-discovery="consul://$DS_IP:8500" --engine-opt="cluster-store=consul://$DS_IP:8500" --engine-opt="cluster-advertise=eth1:2376" $VM_1 
docker-machine create -d virtualbox --swarm --swarm-discovery="consul://$DS_IP:8500" --engine-opt="cluster-store=consul://$DS_IP:8500" --engine-opt="cluster-advertise=eth1:0" $VM_2
docker-machine create -d virtualbox --swarm --swarm-discovery="consul://$DS_IP:8500" --engine-opt="cluster-store=consul://$DS_IP:8500" --engine-opt="cluster-advertise=eth1:0" $LOG_VM


#set overlayer network and run nginx
eval $(docker-machine env $VM_1)
docker network create --subnet=$NETWORK -d overlay $NETWORK_NAME 
docker run -d -v /var/run/docker.sock:/tmp/docker.sock --net=$NETWORK_NAME -h registrator --name registratorSW1 kidibox/registrator -internal consul://$DS_IP:8500
docker build -t ng --build-arg CONSUL=$(docker-machine ip $DS_VM) ./nginx/
docker run -itd -p 80:3000 --name=$PROXY --net=$NETWORK_NAME --env="constraint:node==$VM_1" ng


#run log container
eval $(docker-machine env $LOG_VM)
LOG_IP=$(docker-machine ip $LOG_VM)
docker build -t $LOG_IMAGE ./Logs/
docker run -d -v /var/run/docker.sock:/tmp/docker.sock --net=$NETWORK_NAME -h registrator --name registratorSW2 kidibox/registrator -internal consul://$DS_IP:8500
docker run -itd -p 8080:80 -p 5000:5000 -p 5000:5000/udp --net=$NETWORK_NAME --name "$LOG_INSTANCE"1 --env="constraint:node==$LOG_VM" -e CONSUL_IP=$DS_IP -e LOG_HOST_IP=$LOG_IP $LOG_IMAGE

#zabbix
docker run -d -v /var/lib/mysql --net=$NETWORK_NAME  --name zabbix-db-storage busybox:latest

# start DB for Zabbix
docker run \
    -d \
    --name zabbix-db \
    --net=$NETWORK_NAME \
    -v /backups:/backups \
    -v /etc/localtime:/etc/localtime:ro \
    --volumes-from zabbix-db-storage \
    --env="MARIADB_USER=zabbix" \
    --env="MARIADB_PASS=my_password" \
    zabbix/zabbix-db-mariadb

# start Zabbix linked to started DB
docker run \
    -d \
    --name zabbix \
    -p 8888:80 \
    --net=$NETWORK_NAME \
    -p 10051:10051 \
    -v /etc/localtime:/etc/localtime:ro \
    --link zabbix-db:zabbix.db \
    --env="ZS_DBHost=zabbix.db" \
    --env="ZS_DBUser=zabbix" \
    --env="ZS_DBPassword=my_password" \
    zabbix/zabbix-3.0:latest

#run node container
eval $(docker-machine env $VM_2)
docker build -t $NODE_IMAGE ./node-app/
docker run -d -v /var/run/docker.sock:/tmp/docker.sock --net=$NETWORK_NAME -h registrator --name registratorSW3 kidibox/registrator -internal consul://$DS_IP:8500
docker run  -itd -p 514/udp -p 514/tcp -p 8080 --net=$NETWORK_NAME --name "$NODE"1 --env="constraint:node==$VM_2" -e CONSUL_IP=$DS_IP $NODE_IMAGE
docker run  -itd -p 514/udp -p 514/tcp -p 8080 --net=$NETWORK_NAME --name "$NODE"2 --env="constraint:node==$VM_2" -e CONSUL_IP=$DS_IP $NODE_IMAGE 
docker run  -itd -p 514/udp -p 514/tcp -p 8080 --net=$NETWORK_NAME --name "$NODE"3 --env="constraint:node==$VM_2" -e CONSUL_IP=$DS_IP $NODE_IMAGE 

#run rails webapps
docker build -t $RAILS_NODE_IMAGE ./rails-node-app/
docker run -itd -p 3000 --net="$NETWORK_NAME" --name "$RAILS_NODE"1 --env="constraint:node==$VM_2" -e CONSUL_IP=$DS_IP -e REPLICATION=$REPLICATION -e DYNAMO_MAX_KEY=$DYN_MAX_KEY $RAILS_NODE_IMAGE
docker run -itd -p 3000 --net="$NETWORK_NAME" --name "$RAILS_NODE"2 --env="constraint:node==$VM_2" -e CONSUL_IP=$DS_IP -e REPLICATION=$REPLICATION -e DYNAMO_MAX_KEY=$DYN_MAX_KEY $RAILS_NODE_IMAGE
docker run -itd -p 3000 --net="$NETWORK_NAME" --name "$RAILS_NODE"3 --env="constraint:node==$VM_2" -e CONSUL_IP=$DS_IP -e REPLICATION=$REPLICATION -e DYNAMO_MAX_KEY=$DYN_MAX_KEY $RAILS_NODE_IMAGE
docker run -itd -p 3000 --net="$NETWORK_NAME" --name "$RAILS_NODE"4 --env="constraint:node==$VM_2" -e CONSUL_IP=$DS_IP -e REPLICATION=$REPLICATION -e DYNAMO_MAX_KEY=$DYN_MAX_KEY $RAILS_NODE_IMAGE

#automatically register nodes to consul
curl http://$(docker-machine ip $VM_2):$(docker ps | grep $RAILS_NODE1 | tr -s " " | cut -d" " -f16 | cut -d: -f2 | cut -d"-" -f1)/node/register_to_service_discovery
curl http://$(docker-machine ip $VM_2):$(docker ps | grep $RAILS_NODE2 | tr -s " " | cut -d" " -f16 | cut -d: -f2 | cut -d"-" -f1)/node/register_to_service_discovery
curl http://$(docker-machine ip $VM_2):$(docker ps | grep $RAILS_NODE3 | tr -s " " | cut -d" " -f16 | cut -d: -f2 | cut -d"-" -f1)/node/register_to_service_discovery
curl http://$(docker-machine ip $VM_2):$(docker ps | grep $RAILS_NODE4 | tr -s " " | cut -d" " -f16 | cut -d: -f2 | cut -d"-" -f1)/node/register_to_service_discovery
