#################################
# init script
#################################
# init variables

DS_VM="docker-SD" 
VM_1="sm-docker-0"
VM_2="docker-1"
NETWORK_NAME="private-network"
NETWORK="192.168.99.0/24"
PROXY="proxy"
SD="consul"
NODE="java_instance"
NODE_IMAGE="java_image"
  
#################################

# making new docker virtual machine with discovery service with virtualbox driver
docker-machine create -d virtualbox $DS_VM

#change to $DS_VM
eval $(docker-machine env $DS_VM)

#run consul docker container 
docker run -d -p "8400:8400" -p "8500:8500" -p "8600:53/udp"  --name $SD progrium/consul -server -bootstrap -ui-dir /ui 

DS_IP=$(docker-machine ip $DS_VM)

#run new virtual machines swarm and host
docker-machine create -d virtualbox --swarm --swarm-master --swarm-discovery="consul://$DS_IP:8500" --engine-opt="cluster-store=consul://$DS_IP:8500" --engine-opt="cluster-advertise=eth1:2376" $VM_1 
docker-machine create -d virtualbox --swarm --swarm-discovery="consul://$DS_IP:8500" --engine-opt="cluster-store=consul://$DS_IP:8500" --engine-opt="cluster-advertise=eth1:0" $VM_2

#set overlayer network and run nginx
eval $(docker-machine env $VM_1)
docker network create --subnet=$NETWORK -d overlay $NETWORK_NAME 
docker run -d --name=registrator --net=host --volume=/var/run/docker.sock:/tmp/docker.sock gliderlabs/registrator:latest -ip $(docker-machine ip $VM_1) consul://$DS_IP:8500
docker run -itd -p 8080:80 --name=$PROXY --net=$NETWORK_NAME --env="constraint:node==$VM_1" nginx

#run node container
eval $(docker-machine env $VM_2)
docker build -t $NODE_IMAGE ./node-app/
docker run -d --name=registrator --net=host --volume=/var/run/docker.sock:/tmp/docker.sock gliderlabs/registrator:latest -ip $(docker-machine ip $VM_2) consul://$DS_IP:8500
docker run  -itd -p 514/udp -p 514/tcp -p 8080 --net=$NETWORK_NAME --name "$NODE"1 --env="constraint:node==$VM_2" $NODE_IMAGE
docker run  -itd -p 514/udp -p 514/tcp -p 8080 --net=$NETWORK_NAME --name "$NODE"2 --env="constraint:node==$VM_2" $NODE_IMAGE 
docker run  -itd -p 514/udp -p 514/tcp -p 8080 --net=$NETWORK_NAME --name "$NODE"3 --env="constraint:node==$VM_2" $NODE_IMAGE 
